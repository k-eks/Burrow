import cmd, sys, io, os.path
import fancy_output as out
import analyze_data as ad
import h5py
import numpy as np
from PIL import Image
from matplotlib import pyplot
from matplotlib import colors as colorrange

class Burrow(cmd.Cmd):
    """Processing of data generated by meerkat"""
    
    #onblock "constructor" and "destructor"
    def preloop(self):
        """Setup of all data and settings for further use"""
        self.filename = None
        self.datafile = None
        self.currentImage = Image.new("RGB", (512,512)), "magenta"
        pyplot.ion() #turning interactive mode on
        
    def postloop(self):
        """Destructor, closes the hdf file."""
        if self.datafile != None:
            self.datafile.close()
    #offblock
    
    #onblock command line commands
    #onblock exit comands
    def do_exit(self, line):
        """exit the program"""
        return True
        
    def help_exit(self):
        """exit help page entry"""
        print('\n'.join([ 'This commad exits the program.']))
        
    def do_EOF(self, line):
        """This is the representation of the Ctrl+D shortcut"""
        return True
        
    def help_EOF(self):
        """EOF help page entry"""
        print('\n'.join([ 'This is the representation of the Ctrl+D shortcut',
                           'hit Ctrl+D to exit the program',
                           ]))
    #offblock
    
    def do_openFile(self, argument):
        """Opens a given file."""
        arguments = self.getArg(argument)
        if arguments != -1:
            if "-n" in arguments:
                filename = arguments[arguments.index("-n") + 1]
                if os.path.isfile(filename):
                    #requires replacement with arkadiy's routine
                    self.datafile = h5py.File(filename, 'r')
                    out.okay("File successfully opened!")
                else:
                    out.error("File does not exist!")
            else:
                out.error("No file name is given!")
    #offblock
    
    #onblock internal functions
    def getArg(self, line):
        """Splits the arguments and checks if the correct number of arguments are given."""
        arguments = line.split()
        if len(arguments) % 2 != 0:
            arguments = -1
            out.error("Invalid number of arguments!")
        return arguments
    
    #onblock convertion of images und plots
    def plot2img(self, figure):
        """Converts a pyplot figure into a PIL image by the use of the buffer."""
        buf = io.BytesIO()
        pyplot.savefig(buf, format='png')
        buf.seek(0) 
        return Image.open(buf)
        
    def saveCurrentImage(self, filename):
        """Saves the last image created/displayed."""
        try:
            self.currentImage.save(filename)
            out.okay(filename + " successfully saved!")
        except:
            raise
    #offblock
    #end of internal functions
    #offblock

if __name__ == '__main__':
    """main loop creation"""
    if len(sys.argv) == 2: #in this case, it is assumed that the user provides a file with a list of commands
        input = open(sys.argv[1], 'rt')
        try:
            #setting up silent script mode
            interpreter = Burrow(stdin=input)
            interpreter.use_rawinput = False
            interpreter.prompt = ""
            interpreter.cmdloop()
        finally:
            input.close()
    elif len(sys.argv) == 1: #plain old commandline
        interpreter = Burrow()
        interpreter.cmdloop()
    else:
        out.error("Wrong input, <none> or <script filename> expected!")